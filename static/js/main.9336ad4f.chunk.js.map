{"version":3,"sources":["components/Empty.tsx","components/Header.tsx","typedSelector.ts","components/Result.tsx","functions/math/getEth.ts","functions/math/getUsd.ts","functions/getDataFromContract/getDataFromContract.ts","store/actions/actionTypes.ts","store/actions/dataActionCreator.ts","App.tsx","store/reducers/dataReducer.ts","store/reducers/errorReducer.ts","store/reducers/rootReducer.ts","store/index.ts","index.tsx"],"names":["Empty","className","type","color","height","width","Header","useTypedSelector","useSelector","Result","groups","state","map","group","groupName","cards","card","name","eth","usd","percentCange","getEth","num","num2","ress","Number","isInteger","str","toString","forlength","slice","indexOf","step","i","length","toFixed","getUsd","Intl","NumberFormat","style","currency","format","ABI","require","contract","Web3","Contract","getCardsPromise","arr","methods","getIndex","call","then","promises","a","Promise","all","data","getGroupIds","groupIds","groupPromises","Id","getGroup","groupIndexes","el","indexes","cardsPromises","cardsPromise","id","usdCapitalization","usdPriceInCents","percentageChange","getDataFromContract","GETDATA","ERROR","SUCCESS","dataActionCreator","dispatch","payload","actionTypes","App","useDispatch","error","useEffect","initialState","dataReducer","action","errorReducer","copy","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9336ad4f.chunk.js","sourcesContent":["import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nconst Empty = () => (\n  <div className=\"app__loading\">\n    <Loader\n      type=\"Puff\"\n      color=\"#ffff\"\n      height={100}\n      width={100}\n      // timeout={10000}\n    />\n  </div>\n);\nexport default Empty;\n","import React from 'react';\n\nconst Header = () => (\n  <>\n    <div className=\"app__header\">\n      <div className=\"app__logo\">Logotype</div>\n      <div className=\"app__btn\">\n        <span className=\"app__btn-txt\">Connect wallet</span>\n      </div>\n    </div>\n    <h1 className=\"app__title\">All Indeces</h1>\n  </>\n);\n\nexport default Header;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { storeType } from './store/reducers/rootReducer';\n\nconst useTypedSelector : TypedUseSelectorHook<storeType> = useSelector;\n\nexport default useTypedSelector;\n","import React from 'react';\nimport { CardType } from '../functions/getDataFromContract/getDataFromContract';\nimport useTypedSelector from '../typedSelector';\n\nconst Result = () => {\n  const groups = useTypedSelector((state) => state.groups);\n  return (\n    <div className=\"app__body\">\n      {groups.map((group) => (\n        <div className=\"app__group group\">\n          <h3 className=\"group__title\">{group.groupName}</h3>\n          <div className=\"group__cards\">\n\n            {group.cards.map((card: CardType) => (\n              <div className=\"group__card card\">\n                <span className=\"card__title\">{card.name}</span>\n                <span className=\"card__eth-rate\">\n                  $100/\n                  {card.eth}\n                  {' '}\n                  ETH\n                </span>\n                <div className=\"card__bottom\">\n                  <span className=\"card__price\">{card.usd}</span>\n                  <span className=\"card__percent\">\n                    {' '}\n                    {card.percentCange}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n      <div className=\"app__group group\" />\n    </div>\n  );\n};\n\nexport default Result;\n","/* eslint-disable no-plusplus */\nfunction getEth(num:number, num2:number) {\n  const ress = (num * 100) / num2;\n  if (!Number.isInteger(ress)) {\n    const str = ress.toString();\n    const forlength = str.slice(str.indexOf('.') + 1);\n    let step = 0;\n    for (let i = 0; i < forlength.length; i++) {\n      step++;\n      if (forlength[i] !== '0') break;\n    }\n\n    return ress.toFixed(step);\n  }\n\n  return ress.toFixed(2);\n}\n\nexport default getEth;\n","function getUsd(num: number) {\n  return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'USD' }).format(num / 100);\n}\nexport default getUsd;\n","/* eslint-disable max-len */\nimport Web3 from 'web3';\nimport getEth from '../math/getEth';\nimport getUsd from '../math/getUsd';\n\nconst ABI = require('./ABI.json');\n\ntype GroupType = {\n    name:string;\n    indexes:string[];\n}\nexport type ContractDataType = {\n    groupName:string;\n    cards:CardType[];\n}\nexport type CardType ={\n    id:number;\n    name:string;\n    usd:string;\n    eth:string;\n    percentCange: string;\n}\n\ntype IndexType = {\n     id : number;\n    name : string;\n    ethPriceInWei : number;\n    usdPriceInCents: number;\n    usdCapitalization :number;\n    percentageChange: number ;\n}\n\nconst adrs = '0x4f7f1380239450AAD5af611DB3c3c1bb51049c29';\n\nconst web3 = new Web3('https://ropsten.infura.io/v3/c07b6632ca334279b7d83bb0ba4580fa');\nconst contract = new web3.eth.Contract(ABI, adrs);\n\nfunction getCardsPromise(arr: string[][]) {\n  const promises = arr.map((arr) => arr.map((i: any) => contract.methods.getIndex(i).call().then((ress: any) => ress)));\n  const ress = promises.map(async (promises) => {\n    const data = await Promise.all(promises).then((data) => data);\n    return data;\n  });\n  return ress;\n}\n\nasync function getDataFromContract():Promise<ContractDataType[]> {\n  const groupIds = await contract.methods.getGroupIds().call().then((ress: any) => ress);\n  const groupPromises = groupIds.map((Id:string) => contract.methods.getGroup(Id).call().then((ress:GroupType[]) => ress));\n  const groups : GroupType[] = await Promise.all(groupPromises).then((ress: GroupType[] | any) => ress);\n\n  const groupIndexes = groups.map((el:GroupType) => el.indexes);\n\n  const cardsPromises = getCardsPromise(groupIndexes);\n\n  const cardsPromise = Promise.all(cardsPromises).then((ress) => ress).then((ress) => ress);\n  const cards:IndexType[]|IndexType|any = await cardsPromise.then((ress) => ress);\n\n  return groups.map((group, i) => ({\n    groupName: group.name,\n\n    cards: cards[i].map((el:IndexType, i: number) => ({\n      id: i,\n      name: el.name,\n      usd: getUsd(+el.usdCapitalization),\n      eth: getEth(el.usdPriceInCents, el.usdCapitalization),\n      percentCange: el.percentageChange > 0 ? `+${el.percentageChange}%` : `${el.percentageChange}%`,\n    })),\n  }));\n}\n\nexport default getDataFromContract;\n","export const GETDATA = 'GETDATA';\nexport const ERROR = 'ERROR';\nexport const SUCCESS = 'SUCCESS';\n","import { Dispatch } from 'react';\nimport getDataFromContract from '../../functions/getDataFromContract/getDataFromContract';\nimport { DataActionType } from '../reducers/dataReducer';\nimport * as actionTypes from './actionTypes';\n\ntype error = {\n    type:string\n}\n\nconst dataActionCreator = () => async (dispatch: Dispatch<DataActionType | error >) => {\n  try {\n    const payload = await getDataFromContract().then((ress) => ress);\n    dispatch({\n      type: actionTypes.GETDATA,\n      payload,\n    });\n    dispatch({ type: actionTypes.SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.ERROR });\n  }\n};\n\nexport default dataActionCreator;\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './App.css';\nimport Empty from './components/Empty';\nimport Header from './components/Header';\nimport Result from './components/Result';\nimport dataActionCreator from './store/actions/dataActionCreator';\nimport useTypedSelector from './typedSelector';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const error = useTypedSelector((state) => state.error);\n\n  useEffect(() => {\n    dispatch(dataActionCreator());\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      {error ? (<Empty />) : (<Result />)}\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ContractDataType } from '../../functions/getDataFromContract/getDataFromContract';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState: ContractDataType[] = [];\n\nexport type DataActionType = {\n    type:string;\n    payload :ContractDataType[]\n}\n\nfunction dataReducer(state = initialState, action:DataActionType) {\n  if (action.type === actionTypes.GETDATA) {\n    let copy = [...state];\n    copy = action.payload;\n    return copy;\n  }\n  return state;\n}\nexport default dataReducer;\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = true;\n\nexport type ErrorActionType = {\n    type:string;\n\n}\n\nfunction errorReducer(state = initialState, action:ErrorActionType) {\n  if (action.type === actionTypes.ERROR) {\n    const copy = true;\n\n    return copy;\n  } if (action.type === actionTypes.SUCCESS) {\n    const copy = false;\n\n    return copy;\n  }\n  return state;\n}\nexport default errorReducer;\n","import { combineReducers } from 'redux';\nimport dataReducer from './dataReducer';\nimport errorReducer from './errorReducer';\n\nconst rootReducer = combineReducers({\n  groups: dataReducer,\n  error: errorReducer,\n\n});\nexport type storeType = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}